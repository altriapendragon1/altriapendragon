编程：把一种数据结构变成另外一种数据结构。
一个时代有一个时代的功能，这个时代就是应用开发
两个最重要的能力：
去做pre-pos
编程重要的两步：
编程的第一步（前端）：结构化（非常重要的一步）：变为我的结构，便于编辑。
最后一步（后端）：将所有数据在最后一步显示，所有的计算都在前面完成，在最后输出一个傻瓜式的结果。从网页上扣出一个model出来
写出可测试的代码才是一个职业的编程人员，不然就是业余的。
明天开始测试：    
TDD测试驱动开发——
X（Extrem）P极限编程：如果能够做到极限那么就做到极限，比如说先写测试然后才写代码，写完代码然后让它通过测试，然后改测试，然后再改代码
TDD：写一个case——运行——不期望的失败（测试环境不对等等）——改环境——继续跑测试
                                          ——/期望的失败——改代码——继续跑测试——失败——
                                                                                                                    成功——下一个case
                                                                                                                                  ——重构

回归测试：改一个bug就要检测所有的过程，所以tdd可以保证写完代码的同时有一套完整的回归测试网。
好的程序员写测试写的更好，实现是附送的。
三段式看测试；
given：——输入
when：——过程
then：——输出
好代码的特点：可测试性/可维护性（有自动化测试网络）/可读性：1函数不超过十五行2尽量使用业务名词不使用技术名词3变量名不要使用缩写，要用全称/可用性（隐藏标准）/可扩展性（可以加功能，加扩展）
灵异现象=低级错误
可读性服务于可测试性
tasking：按功能分，适用余低级：按测试场景去分（使用路径）会好很多。
